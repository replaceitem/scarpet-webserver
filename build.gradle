plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id "io.github.dexman545.outlet" version "1.6.1"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url 'https://masa.dy.fi/maven'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "carpet:fabric-carpet:${project.carpet_minecraft_version}-${project.carpet_core_version}"
    
    [
            "org.eclipse.jetty:jetty-server:${project.jetty_version}",
            "org.eclipse.jetty:jetty-util:${project.jetty_version}",
            "org.eclipse.jetty:jetty-http:${project.jetty_version}",
            "org.eclipse.jetty:jetty-io:${project.jetty_version}",
    ].forEach {
        dep -> include(implementation(dep)) {
            transitive = false
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    from("NOTICE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}


import com.modrinth.minotaur.dependencies.ModDependency 

String promptChangelog() {
    File changelogFile = project.file("changelog.md")
    changelogFile.createNewFile()
    println "Edit " + changelogFile.getAbsolutePath() + " and press [Enter] to confirm"
    System.in.read()
    String changelog
    try {
        changelog = changelogFile.text;
    } catch (ignored) {
        changelog = null
    }
    changelogFile.delete()
    return changelog
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "1BG4YFps"
    versionNumber = project.mod_version
    outlet.mcVersionRange = ">=1.17"
    gameVersions = outlet.mcVersions()
    versionType = "beta"
    uploadFile = remapJar
    loaders = ["fabric"]
    dependencies = [
            // carpet
            new ModDependency("TQTTVgYE" ,"required")
    ]
    debugMode = true
    gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
        if (taskGraph.hasTask(":modrinth")) {
            changelog = promptChangelog() ?: "*No changelog provided*"
        }
    }
    syncBodyFrom = rootProject.file("README.md").text
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
